trigger:
- main

pool: 
  name: 'binet-window-agent'

steps:
# 第一步：打包网站文件
- task: ArchiveFiles@2
  displayName: '打包网站文件'
  inputs:
    rootFolderOrFile: '$(Build.SourcesDirectory)'
    includeRootFolder: false
    archiveFile: '$(Build.ArtifactStagingDirectory)/website.zip'

# 第二步：发布成品
- task: PublishBuildArtifacts@1
  displayName: '发布成品'
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)/website.zip'
    artifactName: 'website'

# 第三步：部署到指定IIS路径
- task: PowerShell@2
  displayName: '部署到IIS项目目录'
  inputs:
    targetType: 'inline'
    script: |
      # 定义路径
      $projectPath = "C:\inetpub\wwwroot\project3"
      $zipFile = "$(Build.ArtifactStagingDirectory)/website.zip"
      
      Write-Host "🎯 开始部署到: $projectPath"
      
      # 检查并创建项目目录（如果不存在）
      if (-not (Test-Path $projectPath)) {
          Write-Host "📁 创建项目目录: $projectPath"
          New-Item -ItemType Directory -Path $projectPath -Force
          Write-Host "✅ 目录创建成功"
      } else {
          Write-Host "📁 项目目录已存在，准备更新..."
      }
      
      # 清空目标目录（确保干净部署）
      Write-Host "🧹 清理旧文件..."
      Remove-Item "$projectPath\*" -Recurse -Force -ErrorAction SilentlyContinue
      
      # 解压文件到项目目录（修复解压参数）
      Write-Host "📦 解压文件到项目目录..."
      Add-Type -AssemblyName System.IO.Compression.FileSystem
      try {
          # 方法1：使用正确的解压参数
          [System.IO.Compression.ZipFile]::ExtractToDirectory($zipFile, $projectPath)
          Write-Host "✅ 文件解压成功"
      } catch {
          Write-Host "⚠️  方法1失败，尝试方法2..."
          # 方法2：使用 .NET Core 方式
          Expand-Archive -Path $zipFile -DestinationPath $projectPath -Force
          Write-Host "✅ 文件解压成功（方法2）"
      }
      
      # 配置IIS网站（检查并创建）
      Write-Host "🌐 配置IIS网站..."
      $websiteName = "project3"
      
      # 导入IIS模块
      Import-Module WebAdministration
      
      # 检查网站是否存在
      $websiteExists = Get-Item "IIS:\Sites\$websiteName" -ErrorAction SilentlyContinue
      
      if (-not $websiteExists) {
          Write-Host "首次部署，创建IIS网站..."
          
          # 创建应用程序池
          $appPoolName = "project3AppPool"
          if (-not (Test-Path "IIS:\AppPools\$appPoolName")) {
              New-WebAppPool -Name $appPoolName
              Write-Host "✅ 应用程序池创建成功"
          }
          
          # 创建网站
          New-Website -Name $websiteName -PhysicalPath $projectPath -ApplicationPool $appPoolName -Port 80 -Force
          Write-Host "✅ IIS网站创建成功"
      } else {
          Write-Host "网站已存在，确保运行中..."
          # 确保网站正在运行
          Start-Website -Name $websiteName
      }
      
      Write-Host "🎉 部署完成！"
      Write-Host "📊 部署信息："
      Write-Host "   本地访问: http://localhost/project3"
      Write-Host "   外部访问: http://20.243.10.36/project3"
      Write-Host "   文件路径: $projectPath"
      
      # 显示部署的文件
      Write-Host "📄 部署的文件："
      Get-ChildItem $projectPath -Recurse | ForEach-Object { Write-Host "   - $($_.Name)" }